#!/usr/bin/env node
'use strict';
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('express:server');
var fs = require('fs');
var http = require('http');
var https = require('spdy');
var LEX = require('letsencrypt-express');

// Change these two lines!
var DOMAIN = 'liuzeyafzy.com';
var EMAIL = 'liuzeyafzy@gmail.com';

var lex = LEX.create({
  server: 'https://acme-v01.api.letsencrypt.org/directory'
, email: EMAIL
, acme: require('le-acme-core').ACME.create()
, approveDomains: approveDomains
});

function approveDomains(opts, certs, cb) {
  // This is where you check your database and associated
  // email addresses with domains and agreements and such


  // The domains being approved for the first time are listed in opts.domains
  // Certs being renewed are listed in certs.altnames
  if (certs) {
    opts.domains = DOMAIN;
  }
  else {
    opts.email = EMAIL;
    opts.agreeTos = true;
  }

  // NOTE: you can also change other options such as `challengeType` and `challenge`
  // opts.challengeType = 'http-01';
  // opts.challenge = require('le-challenge-fs').create({});

  cb(null, { options: opts, certs: certs });
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '443');
app.set('port', port);
// var server = https.createServer({key: privateKey, cert: certificate, passphrase:'as123456'}, app);
var server = https.createServer(lex.httpsOptions, lex.middleware(app)).listen(443, function(){
  console.log("Listening for ACME tls-sni-01 challenges and serve app on", this.address())
});
require('http').createServer(lex.middleware(require('redirect-https')())).listen(80, function () {
  console.log("Listening for ACME http-01 challenges on", this.address());
});

var io = require('socket.io')(server);
io.on('connection', function(socket){
  console.log('a user connected');
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
